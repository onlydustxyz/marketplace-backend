name: Backend CI

on:
  pull_request: ~

  push:
    branches:
      - "main"
      - "hotfix/**"

  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: false

env:
  CARGO_TERM_COLOR: always
  GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
  DATABASE_URL: postgres://postgres:postgres@localhost/marketplace_db
  RUST_LOG: info
  HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"5152fa850c02dc222631cca898ed1485821a70912a6e3649c49076912daa3b62182ba013315915d64f40cddfbb8b58eb5bd11ba225336a6af45bbae07ca873f3","issuer":"hasura-auth"}'
  HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: naming_convention
  HASURA_GRAPHQL_DEFAULT_NAMING_CONVENTION: graphql-default
  INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  format:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
          override: true

      - name: Check code formatting
        run: yarn backend:fmt

      - name: Check codecov.yml file format
        run: curl --data-binary @- https://codecov.io/validate < codecov.yml

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup cargo
        uses: ./.github/actions/cargo-setup

      - name: Check application
        run: yarn backend:check

  build:
    name: Compile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup cargo
        uses: ./.github/actions/cargo-setup

      - name: Compile application
        run: yarn backend:build

  lint:
    name: Clippy checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup cargo
        uses: ./.github/actions/cargo-setup

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: yarn backend:clippy

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest-4-cores
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup cargo
        uses: ./.github/actions/cargo-setup

      - name: Setup environment
        uses: ./.github/actions/env-setup

      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Run tests
        run: yarn backend:unit-tests-with-coverage

      - name: Setup tmate session for debugging
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() && inputs.debug_enabled }}

      - name: Upload coverage results
        uses: ./.github/actions/coverage-upload
        with:
          codecov_token: ${{ secrets.CODECOV_TOKEN }}
          codecov_flag: unittest
          file: cobertura.xml

  api_integration_tests:
    name: Integration tests
    runs-on: ubuntu-latest-8-cores
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup cargo
        uses: ./.github/actions/cargo-setup

      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Run tests
        run: yarn backend:integration-tests-with-coverage

      - name: Setup tmate session for debugging
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() && inputs.debug_enabled }}

      - name: Upload coverage results
        uses: ./.github/actions/coverage-upload
        with:
          codecov_token: ${{ secrets.CODECOV_TOKEN }}
          codecov_flag: integration_tests
          file: cobertura.xml
